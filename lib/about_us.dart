import 'package:flutter/material.dart';
import 'package:solve_exercise/utility.dart';

// ==== ƒê∆Ø·ªúNG D·∫™N ·∫¢NH (ƒë·ªïi theo file c·ªßa b·∫°n) ====
const String kAboutMidHero = 'assets/about/abt_us2.png';
const String kAboutBottomHero = 'assets/about/abt_us1.png';
const String kIconHeaderSun = 'assets/about/light.png'; // 40x40 c·∫°nh H1
const String kIconLeftBook =
    'assets/about/Group48.png'; // icon nh·ªè b√™n tr√°i ƒëo·∫°n 1
const String kIconRightBackpack =
    'assets/about/backpack.png'; // icon nh·ªè b√™n ph·∫£i ƒëo·∫°n 2

class AboutUsPage extends StatelessWidget {
  const AboutUsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final theme = Theme.of(context);

    final side = (size.width * 0.07).clamp(16, 22).toDouble();
    final topGap = (size.height * 0.04).clamp(14, 24).toDouble();
    final h1 = (size.width * 0.072).clamp(20, 28).toDouble();
    final h2 = (size.width * 0.064).clamp(18, 24).toDouble();
    final bodySize = (size.width * 0.040).clamp(13, 16).toDouble();
    final paraGap = (size.height * 0.018).clamp(10, 16).toDouble();

    // ·∫¢nh gi·ªØa to v·ª´a, ·∫£nh cu·ªëi to h∆°n 1 ch√∫t nh∆∞ mock
    final hero1MaxH = (size.height * 0.20).clamp(120, 180).toDouble();
    final hero2MaxH = (size.height * 0.28).clamp(170, 260).toDouble();
    final bulletStyle = theme.textTheme.bodyMedium?.copyWith(
      height: 1.4,
      color: const Color(0xFF3A3F63),
    );

    return Scaffold(
      body: Stack(
        children: [
          const SoftGradientBackground(includeBaseLayer: true),
          SafeArea(
            child: SingleChildScrollView(
              padding: EdgeInsets.fromLTRB(side, topGap, side, topGap),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // ===== H1 + icon m·∫∑t tr·ªùi (40x40) =====
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Flexible(
                        child: Text(
                          'H·ªçc B√° AI l√† g√¨?',
                          textAlign: TextAlign.center,
                          style: theme.textTheme.headlineSmall?.copyWith(
                            fontSize: h1,
                            fontWeight: FontWeight.w500,
                            color: const Color(0xFF2D2F79),
                            height: 1.2,
                          ),
                        ),
                      ),
                      const SizedBox(width: 6),
                      Image.asset(kIconHeaderSun, width: 40, height: 40),
                    ],
                  ),

                  // ƒêo·∫°n 1 + icon nh·ªè b√™n tr√°i (l·ªçt m√©p)
                  ParagraphWithSideIcon(
                    text:
                        'H·ªçc B√° AI l√† ·ª©ng d·ª•ng gi·∫£i b√†i t·∫≠p nh∆∞ng kh√¥ng ph·∫£i ƒë·ªÉ l√†m b√†i h·ªô. '
                        'Kh√¥ng ph·∫£i ƒë·ªÉ r√∫t ng·∫Øn ƒë∆∞·ªùng h·ªçc b·∫±ng l·ªëi t·∫Øt. M√† ƒë·ªÉ tr·ªü th√†nh m·ªôt ‚Äútr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh‚Äù, '
                        'lu√¥n ki√™n nh·∫´n gi·∫£i th√≠ch, h∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc v√† gi√∫p ng∆∞·ªùi h·ªçc t·ª± hi·ªÉu b√†i.',
                    textStyle: theme.textTheme.bodyMedium?.copyWith(
                      fontSize: bodySize,
                      height: 1.45,
                      color: const Color(0xFF3A3F63),
                    ),
                    side: AxisDirection.left,
                    iconPath: kIconLeftBook,
                    iconSize: const Size(48, 40),
                    // ƒë·∫©y icon ra ngo√†i m√©p tr√°i 8px, n·∫±m h∆°i cao h∆°n d√≤ng ƒë·∫ßu ~2px
                    offset: const Offset(10, 250),
                  ),


                  // ·∫¢nh gi·ªØa
                  Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(maxHeight: hero1MaxH),
                      child: Image.asset(kAboutMidHero, fit: BoxFit.contain),
                    ),
                  ),


                  // ===== H2 =====
                  Center(
                    child: Text(
                      'C√¢u chuy·ªán v·ªÅ H·ªçc b√° AI',
                      style: theme.textTheme.headlineSmall?.copyWith(
                        fontSize: h2,
                        fontWeight: FontWeight.w500,
                        color: const Color(0xFF2D2F79),
                        height: 1.2,
                      ),
                    ),
                  ),

                  // ƒêo·∫°n 2 + icon nh·ªè b√™n ph·∫£i (l·ªçt m√©p)
                  ParagraphWithSideIcon(
                    text:
                        'Tr∆∞·ªõc khi tr·ªü th√†nh nh·ªØng ng∆∞·ªùi l√†m c√¥ng ngh·ªá, ch√∫ng t√¥i c≈©ng t·ª´ng l√† nh·ªØng h·ªçc sinh ham h·ªçc ‚Äì ham ch∆°i, '
                        't·ª´ng m·∫•t h√†ng gi·ªù loay hoay v·ªõi nh·ªØng b√†i t·∫≠p hack n√£o. Ch√∫ng t√¥i hi·ªÉu r·∫±ng m·ªói ng∆∞·ªùi c√≥ c√°ch h·ªçc kh√°c nhau, '
                        'v√† kh√¥ng ai n√™n b·ªã √©p ƒëi theo m·ªôt l·ªëi h·ªçc duy nh·∫•t.\n\n'
                        'T·ª´ tr·∫£i nghi·ªám ƒë√≥, H·ªçc B√° AI ra ƒë·ªùi ‚Äî nh∆∞ m·ªôt tr·ª£ l√Ω h·ªçc t·∫≠p th√¥ng minh lu√¥n ·ªü b√™n, '
                        'gi√∫p b·∫°n hi·ªÉu b√†i theo c√°ch ph√π h·ª£p nh·∫•t v·ªõi ch√≠nh m√¨nh. '
                        'Kh√¥ng ph·∫£i ƒë·ªÉ l√†m b√†i h·ªô, m√† ƒë·ªÉ bi·∫øn b√†i kh√≥ th√†nh c∆° h·ªôi h·ªçc th√¥ng minh h∆°n.',
                    textStyle: theme.textTheme.bodyMedium?.copyWith(
                      fontSize: bodySize,
                      height: 1.45,
                      color: const Color(0xFF3A3F63),
                    ),
                    side: AxisDirection.right,
                    iconPath: kIconRightBackpack,
                    iconSize: const Size(40, 45),
                    // ƒë·∫©y ra m√©p ph·∫£i 6px, ƒë·∫∑t th·∫•p h∆°n ƒë·∫ßu ƒëo·∫°n ~4px
                    offset: const Offset(-6, 160),
                  ),

                  SizedBox(height: paraGap),

                  // --- Bullets (kh√¥ng d√πng class, gi·ªØ ƒë√∫ng format üëâN·ªôi dung) ---
                  Text(
                    'üëâ H·ªçc d·ªÖ h∆°n v·ªõi b√†i gi·∫£i m·∫´u chi ti·∫øt.',
                    style: bulletStyle,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'üëâ Hi·ªÉu s√¢u h∆°n khi n·∫Øm r√µ ph∆∞∆°ng ph√°p gi·∫£i.',
                    style: bulletStyle,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'üëâ H·ªçc m·ªçi l√∫c m·ªçi n∆°i ch·ªâ v·ªõi chi·∫øc ƒëi·ªán tho·∫°i nh·ªè.',
                    style: bulletStyle,
                  ),

                  // ·∫¢nh cu·ªëi (to h∆°n)
                  Center(
                    child: ConstrainedBox(
                      constraints: BoxConstraints(maxHeight: hero2MaxH),
                      child: Image.asset(kAboutBottomHero, fit: BoxFit.contain),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}

/// Bullet ‚Äúüëâ ‚Ä¶‚Äù
class _Bullet extends StatelessWidget {
  const _Bullet({required this.text});

  final String text;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: const [
        Text('üëâ', style: TextStyle(fontSize: 16, height: 1.25)),
        SizedBox(width: 8),
        Expanded(
          child: Text(
            // text ƒë∆∞·ª£c truy·ªÅn ngo√†i, nh∆∞ng ƒë·ªÉ const kh√¥ng ƒë∆∞·ª£c;
            // ·ªü ƒë√¢y ch·ªâ l√† layout m·∫´u, b·∫°n gi·ªØ nguy√™n b·∫£n d√πng ·ªü tr√™n (kh√¥ng const).
            '',
          ),
        ),
      ],
    );
  }
}

/// ƒê·∫∑t m·ªôt ƒëo·∫°n vƒÉn v√† ‚Äúghim‚Äù icon ·∫£nh ·ªü m√©p tr√°i/ph·∫£i v·ªõi offset m·ªãn.
class ParagraphWithSideIcon extends StatelessWidget {
  const ParagraphWithSideIcon({
    super.key,
    required this.text,
    required this.textStyle,
    required this.side,
    required this.iconPath,
    this.iconSize = const Size(40, 40),
    this.offset = Offset.zero,
  });

  final String text;
  final TextStyle? textStyle;
  final AxisDirection side; // AxisDirection.left / right
  final String iconPath;
  final Size iconSize;
  final Offset offset;

  @override
  Widget build(BuildContext context) {
    final paragraph = Text(text, style: textStyle);
    final icon = Transform.translate(
      offset: offset,
      child: Image.asset(
        iconPath,
        width: iconSize.width,
        height: iconSize.height,
      ),
    );

    // D√πng Stack ƒë·ªÉ icon c√≥ th·ªÉ ‚Äúl·ªçt‚Äù ra m√©p container
    return Stack(
      clipBehavior: Clip.none,
      children: [
        paragraph,
        Positioned(
          top: 0,
          left: side == AxisDirection.left ? -iconSize.width * 0.35 : null,
          right: side == AxisDirection.right ? -iconSize.width * 0.35 : null,
          child: icon,
        ),
      ],
    );
  }
}

/// Ti√™u ƒë·ªÅ c√≥ icon d√°n c·∫°nh (n·∫øu c·∫ßn), m·∫∑c ƒë·ªãnh cƒÉn gi·ªØa.
class SectionTitleWithSideIcon extends StatelessWidget {
  const SectionTitleWithSideIcon({
    super.key,
    required this.title,
    required this.textStyle,
    required this.iconPath,
    this.iconSize = const Size(40, 40),
    this.gap = 6,
  });

  final String title;
  final TextStyle? textStyle;
  final String iconPath;
  final Size iconSize;
  final double gap;

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Flexible(
          child: Text(title, textAlign: TextAlign.center, style: textStyle),
        ),
        SizedBox(width: gap),
        Image.asset(iconPath, width: iconSize.width, height: iconSize.height),
      ],
    );
  }
}
